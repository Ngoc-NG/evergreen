#!/usr/bin/env node

const path    = require('path');

const compareVersions = require('compare-versions');
const logger          = require('winston');
const request         = require('request-promise');
const yargs           = require('yargs');

const Manifest         = require('./cli/manifest');
const ManifestResolver = require('./cli/manifest-resolver');
const UpdateCenter     = require('./cli/update-center');

logger.level = process.env.LOG_LEVEL || 'info';

const INCREMENTALS = 'https://repo.jenkins-ci.org/incrementals/';


/*
 * Workflows:
 *
 * Propose changes: consult the latest changes from the update center to see if
 * there are updated released versions available
 *
 * save: take the specified dependencies and save the status of the file
 *
 * generate-ingest: generate the ingest.json based off of what is in the save?
 */

yargs.command('propose-updates',
  'Fetch the latest Update Center and propose updates',
  () => {},
  (argv) => {
  }
);
yargs.command('save',
  'Resolve dependencies specified essentials.yaml and re-save the file',
  () => {},
  (argv) => {
    logger.info('Resolving dependencies...');
    const manifest = Manifest.loadFile();
    const resolver = new ManifestResolver();

    /*
     * UpdateCenter metadata is required for finding metadata about dependent
     * plugins
     */
    const uc = UpdateCenter.fromFile('./update-center.json')

    resolver.resolve(manifest.getPlugins(), uc.plugins).then(() => {
      const resolutions = resolver.getResolutions();

      let bomStatus = {
        core: {},
        plugins: [],
        environments: [],
      }
      bomStatus.plugins = resolutions
        .sort((a, b) => {
          if (a.artifactId < b.artifactId) { return -1; }
          if (a.artifactId > b.artifactId) { return 1; }
          return 0;
        })
        .map((plugin) => {
          return {
            groupId:    plugin.groupId,
            artifactId: plugin.artifactId,
            version:    plugin.version,
          };
      });
      manifest.setStatus(bomStatus);
      logger.info(`Writing updates to ${manifest.fileName}`);
      manifest.saveSync();
    });
  }
);
yargs.command('generate-ingest',
  'Generate the ingest.json for upload based on essentials.yaml',
  () => {},
  (argv) => {
  }
);
/* parse the commands */
yargs.argv;

const UPDATE_CENTER = 'https://updates.jenkins.io/update-center.actual.json';

let tasks = [];

//let r = request({
//  url: UPDATE_CENTER,
//  json: true,
//}).then((uc) => {
//  Object.keys(uc.plugins).forEach(n => logger.info(n));
//});
//tasks.push(r);
//
//Promise.all(tasks).then(r => logger.info('Finished!'));
